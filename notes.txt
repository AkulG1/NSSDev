//Functionalities
Adding Products
Search
Cart
Authentication signin/signup and Facebook Login
Payment

//Technologies
nodejs
expressjs
ejs
mongodb
elastic search
jquery
stripe (for payments)

//Tools to download
Nodejs LTS
atom
create account at mongolab.com
git
github

//http methods
get
app.get('/',function(req,res){
  var name = "Lovepreet";
  res.json("My name is " + name);
});
post
app.post()
put
app.put()
delete
app.delete()

//installation
sudo apt-get install nodejs
sudo apt-get install npm
after doing this create a symlink using following command
ln -s /usr/bin/nodejs /usr/bin/node
sudo npm install nodemon -g
npm init  // provide details there


write your server.js connection code like this:
var express = require('express');
var app = express(); // object of express

app.listen(3000,function(err){
  if(err) throw err;
  console.log("Server is Running");
});

install express now through terminal
npm install express --save
on doing this package.json gets modified automatically and node_modules folder appears in site folder automatically
now run server through following command
nodemon server

create homepage using app.get method

add 'morgan' logging request library in server.js
after it install morgan from terminal using command
npm install morgan --save

create a new folder models. It will contain schemas for our databases
create new file in this folder named 'user.js'
in this file create schema named 'UserSchema'
at last of this file write export command
then install mongooose and bcrypt-nodejs from terminal using the following command
npm install mongoose bcrypt-nodejs --save

got to server.js file and import mongoose library there and connect to database by using mongoose.connect function
now go to site mongolab.com and login to your account. Click on 'create new' button ,select amazon web services, select single node , select sandbox, provide name for db, click deploy.
click on newly creatd db and add database user using 'users' tab
copy url of db and paste it in mongoose.connect function and change dbuser and dbpassword fields in url
now start the server again using command : nodemon server

import 'body-parser' to server.js and also install it from terminal using command
npm install body-parser --save

write few body-parser functions
write a post function in server.js to handle post request for user creation
then install postman in chrome and create a request

next we have to install ejs and ejs-mate from terminal and import them in server.js
ejs is a superpower for html. It is a library to render web pages. ejs-mate is an extension of ejs.
next write middleware functions for ejs and then create a new folder 'views' and inside it create a new file 'home.ejs'
write some html content with headings and paragraph tags in 'home.js' and add code to 'server.js' to render it
create new file 'boillerplate.ejs' . This basically is used to include on all pages just like header and footer of website.Declare 'body' command of ejs in this file and later include it in other main files like 'home.ejs' and 'about.ejs' using 'layout' command.
create a new folder 'main' inside 'views' and move home.ejs and about.ejs into it. 'main' folder will contain main pages of our website.
after changing location of home.ejs and about.ejs make changes to their rendering functions in 'server.ejs'

create new folder 'partials' inside 'views' and create two files named 'navbar.ejs' and 'footer.ejs'. Write some content to these files and then go to 'boilerplate.ejs' and include theme using 'include' commannd of ejs
remove all content form 'boilerplate ejs' and paste some source code of page from bootstrap website. Delete extra links from page as we will include separate files for them in our website.
create new folder named 'public' inside 'Ecommerce' folder.This folder will contain our static files such as css and js.
Create a new folder 'css' inside 'public' and paste 'bootstrap.min.css' inside it
Now we need to tell express about this folder. We go to server.js and at top of all middleware we add some code for it.
now include bootstrap file in boilerplate file using some code

next we create a folder named 'routes'. Inside it we create two files 'main.js' and 'user.js'.
'main.js' will have routes of home,product,cart,search routes etc while 'user.js' will handle routes of user like login,profile, signup ,logout etc
next cut code of home and about rendering from 'server.js' and paste it inside 'main.js'. Import a router and change code accordingly and at last export that router from that page i.e. 'main.js'
next cut code of user creation from server.js and paste it inside 'user.js' inside routes folder
delete existing code from 'user.js' and write some validation code and later include this route inside server.js file

create a new folder 'accounts' inside 'views' and create a new file 'signup.ejs' inside it and add some form code to it. Later add it to user.js file using router
create a new file 'layout.ejs' just like 'boilerplate.ejs' inside views folder and include this layout inside 'signup.ejs' using 'layout' command
cut navbar and footer sections from layout.ejs file and paste it in navbar.ejs and footer.ejs and include the files as partials in 'layout.ejs' using 'include' command. Write 'body' command also between container
create a new file 'custom.css' inside 'css' folder of public

Now to display flash messages on signup page we import a libray names 'express-flash' along with two more libraries 'express-session' and 'cookie-parser' into 'server.js'
Now we have to teach our express application of how to use these libraries , so we write middleware functions for it in middleware.
next modify user.js to display these flash messages . In user.js remember to modify get request also. There we have to pass an argument to specify that we want to show flash messages on requested page

create a new folder 'config' in the project folder and create two files 'secret.js' and 'passport.js'
inside 'secret.js' write db detials etc and replace those details in server.js after importing the secret file there.

//login part starts here

first install 'connect-mongo' library from terminal and import it in server.js
we will be using passport library for authentication
import this library into server.js and passport.js
also install another library passport-local and import it in passport.js
add login authentication code into 'passport.js'
add some code to 'user.js' to declare a route for login
import passport library and passport config file into user.js
there will be some error check if you have this in server.js correctly or not : var MongoStore = require('connect-mongo/es5')(session);
// some errors encountered
1. add import user database into passport.js
2. set middleware for passport in server.js

create new file login.ejs and profile.ejs into views->accounts folder
make some changes to navbar styling
make user data accessible on all pages by writing a middleware in server.js
create logout route in user.js

make changes to signup rote in user.js
declare a custom function in UserSchema in user.js in models folder to include gravatar functionality to display unique profile pictures
call gravatar function in signup route to set profile picture of user on signup
import crypto library in user.js file in models folder

define schema for products and category
added new file admin.js in routes folder
make a new folder admin inside views folder and create a new file add-category.ejs inside it.
add newly created admin route to server.js
import CategorySchema into server.js and define middleware for it

add a new folder 'api' in project folder and create a new file 'api.js' inside it.
import async and faker libraries into api.js with some other imports also.
install async and faker through terminal also
write code into api.js to generate some fake data
go to server.js and import these routes
open main.js and create a route there for product category
create a new file category.ejs inside main folder
added routes for accessing products using categories and single product page in main.js

install elastic search on ubuntu
add mongoosastic library into product.js
create mapping between elastic search and mongodb in main.js

i faced some error with mongoosastic version. Install version 3.6.0 for this project as higher versions of mongoosastic demand higher versions of nodejs
npm install mongoosastic@3.6.0
in package.json add
"mongoosastic": "3.6.0"
create routes for search in main.js and create a new file under views->main folder as 'search-result.ejs'
create a new page 'product-main.ejs'
modify route '/' in main.js
implement pagination in main.js and product-main.ejs

create a new api in api.js under api folder for instant search
add new file custom.js in js folder and include it in javascriptOnly.js file also and write jquery ajax code for instant search in it


add new schema cart.js into models foldermodify signup route in user.js
create a new folder 'middlewares' in project folder and inside it create a file names 'middewares.js'
include this midlewares in server.js
modify navbar.ejs to show the cart
create a route for cart in main.js

added some code into custom.js and product.ejs for cart purposes
create a route for cart in main.js
create a new file 'cart.ejs' in main folder

add stripe to main.js
install stripe using npm
make account on stripe site
for stripe testing type'stripe payment testing' in google
declare spinner ,stripe payment etc in custom.js
